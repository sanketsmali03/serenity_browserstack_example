buildscript {
    ext {
        serenity_version = '2.1.5'
        serenity_cucumber4_version = '2.1.2'
        cucumber_version = '4.8.0'
    }

    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "net.serenity-bdd:serenity-gradle-plugin:$serenity_version"
    }
}

plugins {
    id "java"
    id "idea"
}

apply plugin: "net.serenity-bdd.aggregator"

repositories.addAll(buildscript.repositories)

description = 'Gradle solution for Serenity-Cucumber4 forking mechanizm'
group 'com.github.scormaq'
version = '1.0-SNAPSHOT'

idea.module {
    downloadJavadoc = true
    downloadSources = true
}

configurations.all {
    resolutionStrategy {
        failOnVersionConflict()
        preferProjectModules()
        force "io.cucumber:cucumber-core:$cucumber_version", "io.cucumber:cucumber-java:$cucumber_version", "io.cucumber:cucumber-junit:$cucumber_version"
    }
}

dependencies {
    compile "net.serenity-bdd:serenity-core:$serenity_version"
    compile "net.serenity-bdd:serenity-cucumber4:$serenity_cucumber4_version"
    compile "io.cucumber:cucumber-core:$cucumber_version"
    compile "io.cucumber:cucumber-junit:$cucumber_version"

    compile "org.apache.logging.log4j:log4j-slf4j-impl:2.11.1"
    compile "org.apache.logging.log4j:log4j-core:2.11.1"
}

test {
	systemProperty "parallel", "classes"
	systemProperty "threadCount", "5"
    List<String> runners = file('src/test/java/com/github/runner').listFiles()
            .collect { it.name }
            .findAll { it =~ 'FeatureSlicedRunner' }
            .collect { it.take(it.lastIndexOf('.')) }

    maxParallelForks = System.properties.'serenity.fork.count' as Integer ?: 5
 	maxParallelForks = [maxParallelForks, runners.size()].min()
    systemProperty 'serenity.fork.count', maxParallelForks 
    maxParallelForks.times { filter.includeTestsMatching runners[it] }
    ignoreFailures = true
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'
}

gradle.startParameter.continueOnFailure = true
